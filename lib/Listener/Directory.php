<?php declare(strict_types=1);

namespace Mfn\PHP\Reflection\Generator\Listener;

use Mfn\PHP\Reflection\Generator\Reflector;

class Directory implements Listener {

  /**
   * Directory to write per-extension generated reflection data too
   * @var \SplFileInfo
   */
  private $directory;
  /**
   * Collect reflection data per extension
   * Key is the extension name, value is the collected reflection data
   * @var string[]
   */
  private $extension = [];

  public function __construct($directory) {
    if (!($directory instanceof \SplFileInfo)) {
      $directory = new \SplFileInfo($directory);
    }
    $this->setDirectory($directory);
  }

  /**
   * Called before generating starts
   */
  public function beforeGenerate() {
    // TODO: Implement beforeGenerate() method.
  }

  /**
   * Called for every reflected function
   *
   * @param \ReflectionFunction $function
   * @param string $generated
   * @param $generated
   */
  public function generateFunction(\ReflectionFunction $function, $generated) {
    $this->addToExtension($function->getExtensionName(), $generated);
  }

  /**
   * @param string $extension
   * @param string $generated
   */
  private function addToExtension($extension, $generated) {
    if (!isset($this->extension[$extension])) {
      $version = Reflector::VERSION;
      $phpVersion = phpversion();
      $extVersion = phpversion($extension);
      if (false === $extVersion) {
        $extVersion = '';
      } else {
        $extVersion = ' ' . $extVersion;
      }
      $this->extension[$extension] = <<<HEADER
<?php
# Generated by mfn/php-reflection-gen $version
# PHP version $phpVersion, extension $extension$extVersion

HEADER;
    }
    $this->extension[$extension] .= $generated;
  }

  /**
   * Called for every reflected class, interface or trait
   *
   * @param \ReflectionClass $class
   * @param string $generated
   * @param $generated
   */
  public function generateClass(\ReflectionClass $class, $generated) {
    $this->addToExtension($class->getExtensionName(), $generated);
  }

  /**
   * Called when generating is finished
   */
  public function afterGenerate() {
    foreach ($this->extension as $name => $generated) {
      file_put_contents(
        $this->directory->getRealPath() . DIRECTORY_SEPARATOR . $name . '.php',
        $generated
      );
    }
  }

  /**
   * @return string
   */
  public function getDirectory() {
    return $this->directory;
  }

  /**
   * @param \SplFileInfo $directory
   * @return $this
   */
  public function setDirectory(\SplFileInfo $directory) {
    if (!$directory->isDir()) {
      throw new \RuntimeException(
        'Provided file ' . $directory->getRealPath() . ' not a directory'
      );
    }
    $this->directory = $directory;
    return $this;
  }
}
